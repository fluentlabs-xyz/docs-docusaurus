name: Deploy Preview Manual

on:
  issue_comment:
    types: [created]

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    steps:
      - name: Log event payload
        run: echo '${{ toJson(github.event) }}'

      - name: Debug event info
        run: |
          echo "üîç Triggering event: ${{ github.event_name }}"
          echo "üí¨ Comment body: ${{ github.event.comment.body }}"
          echo "üî¢ Issue number: ${{ github.event.issue.number }}"

      - name: Check if comment is in PR
        if: github.event.issue.pull_request
        run: echo "‚úÖ This is a PR, proceeding..."

      - name: Check commenter permissions
        id: check-permissions
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commenter = context.payload.comment.user.login;
            const issue_number = context.payload.issue.number;
            const run_id = context.runId;
            const actions_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;

            console.log("üîé Checking if issue is a PR...");
            let pull;
            try {
              pull = await github.rest.pulls.get({ owner, repo, pull_number: issue_number });
              console.log("‚úÖ Issue is a PR:", pull.data.html_url);
            } catch (error) {
              console.log("‚ùå This is not a PR:", issue_number);
              core.setFailed("This is not a pull request");
              return;
            }

            console.log("üîé Checking commenter permissions...");
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username: commenter
              });

              console.log(`üë§ User @${commenter} has permission: ${permission.permission}`);
              
              if (!['admin', 'write'].includes(permission.permission)) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `@${commenter} does not have sufficient permissions to trigger deployments.`
                });
                core.setFailed("‚ùå Insufficient permissions");
                return;
              }
            } catch (error) {
              console.log("‚ùå Error checking permissions:", error.message);
              core.setFailed(`Error checking permissions: ${error.message}`);
              return;
            }

            const commit_sha = pull.data.head.sha;
            const short_sha = commit_sha.substring(0, 7);
            const pr_url = pull.data.html_url;

            console.log("‚úÖ PR SHA:", commit_sha);
            core.setOutput("pr_number", issue_number);
            core.setOutput("pr_sha", commit_sha);
            core.setOutput("short_sha", short_sha);

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `üîÑ @${commenter} triggered a **preview deployment** for [PR #${issue_number}](${pr_url}) at commit \`${short_sha}\`.

            üöÄ Deployment starting...  
            üîó [Check deployment status](${actions_url})`
            });

            return "Deployment authorized";

      - name: Download build artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          name: pr-${{ steps.check-permissions.outputs.pr_number }}-${{ steps.check-permissions.outputs.pr_sha }}-build
          path: build
          workflow: build.yml
          repo: ${{ github.repository }}
          commit: ${{ steps.check-permissions.outputs.pr_sha }}
          allow_forks: true
          check_artifacts: true

      - name: List downloaded files
        run: ls -lR build

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prepare deployment
        run: |
          mkdir -p ./deploy
          cp -r build/* ./deploy/
          cd ./deploy
          echo '{"name":"deploy","version":"1.0.0","private":true}' > package.json
          npm install wrangler@3 --save-dev

      - name: Deploy to Cloudflare Pages
        id: deploy
        working-directory: ./deploy
        run: |
          echo "üöÄ Starting Cloudflare Pages preview deployment..."
          PR_NUMBER="${{ steps.check-permissions.outputs.pr_number }}"
          SHORT_SHA="${{ steps.check-permissions.outputs.short_sha }}"
          BRANCH_NAME="pr-${PR_NUMBER}-${SHORT_SHA}"

          echo "üîó Deploying branch: ${BRANCH_NAME}"
          npx wrangler pages deploy . --project-name=docs-docusaurus --commit-dirty=true --branch="${BRANCH_NAME}" 2>&1 | tee deploy.log

          DEPLOY_URL=$(grep -o 'https://[^ ]*\.pages\.dev' deploy.log | head -n 1)
          if [ -n "$DEPLOY_URL" ]; then
            echo "‚úÖ Deployment successful!"
            echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "::notice::Deploy URL: $DEPLOY_URL"
          else
            echo "::error::‚ùå Failed to extract deploy URL."
            cat deploy.log
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment on PR with preview URL
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const deployUrl = "${{ steps.deploy.outputs.deploy_url }}";
            const prNumber = "${{ steps.check-permissions.outputs.pr_number }}";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `üöÄ **Preview deployed successfully!**
              üîó [View Preview](${deployUrl})`
            });